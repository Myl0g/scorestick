---
- name: Put every service on an (APT/DNF based) Linux box
  hosts: all
  become: true
  gather_facts: true

  vars:
    packages:
      Debian:
        ssh: openssh-server
        ldap: slapd
        postgresql: postgresql
        mysql: default-mysql-server
        apache: apache2
        nginx: nginx
        ftp: vsftpd
        smb: samba
      RedHat:
        ssh: openssh-server
        ldap: openldap-servers
        postgresql: postgresql-server
        mysql: mariadb-server
        apache: httpd
        nginx: nginx
        ftp: vsftpd
        smb: samba

    service_names:
      Debian:
        apache: apache2
        smb: smbd
      RedHat:
        apache: httpd
        smb: smb
        mysql: mariadb

    configuration_files:
      Debian:
        mysql: /etc/mysql/mysql.conf.d/mysqld.cnf
      RedHat:
        mysql: /etc/my.cnf.d/mariadb-server.cnf

  pre_tasks:
    - name: Determine package names based on distribution
      ansible.builtin.set_fact:
        package_list: "{{ packages[ansible_os_family] }}"
        service_list: "{{ service_names[ansible_os_family] | default({}) }}"
      tags: always

  tasks:
    - name: Ensure existence of ccdc:ccdc user
      ansible.builtin.user:
        name: ccdc
        password: "$1$cWbBYKiF$eFGx65B0FrkHFtup6jw45." # ccdc
      tags: create_user

    - name: Ensure ccdc user can get root
      ansible.builtin.lineinfile:
        line: 'ccdc	ALL=(ALL) 	ALL'
        state: present
        validate: '/usr/sbin/visudo -cf %s'
        path: /etc/sudoers
      tags: create_user

    - name: Update package manager cache (Debian)
      ansible.builtin.apt:
        update_cache: true
      tags: install_packages
      when: ansible_os_family == "Debian"
    - name: Update package manager cache (RHEL)
      ansible.builtin.dnf:
        update_cache: true
      when: ansible_os_family == "RedHat"
      tags: install_packages

    - name: On Rocky, enable extra repos for LDAP
      community.general.dnf_config_manager:
        name: plus
        state: enabled
      when: ansible_distribution == "Rocky"
      tags: install_packages

    - name: Clean Rocky dnf repos up
      ansible.builtin.command: dnf clean all
      changed_when: false
      when: ansible_distribution == "Rocky"
      tags: install_packages

    - name: Re-update Rocky repos
      ansible.builtin.dnf:
        update_cache: true
      when: ansible_distribution == "Rocky"
      tags: install_packages

    - name: Install services
      ansible.builtin.package:
        name: "{{ package_list[item] }}"
        state: present
      loop: "{{ package_list.keys() }}"
      tags: install_packages

    - name: Remove Cloud Init SSH configurations
      ansible.builtin.lineinfile:
        line: "Include /etc/ssh/sshd_config.d/*.conf"
        state: absent
        path: /etc/ssh/sshd_config
      tags: sshd_config

    - name: Guarantee password authentication
      ansible.builtin.lineinfile:
        line: "PasswordAuthentication yes"
        state: present
        path: /etc/ssh/sshd_config
      tags: sshd_config

    - name: Remove bans on password authentication
      ansible.builtin.lineinfile:
        line: "PasswordAuthentication no"
        state: absent
        path: /etc/ssh/sshd_config
      tags: sshd_config

    - name: Create SSL dir for Nginx (if not already present)
      ansible.builtin.file:
        state: directory
        path: /etc/nginx/ssl
        mode: '0755'
      tags: nginx_config

    - name: Create Nginx's Self-Signed Private Key
      community.crypto.openssl_privatekey:
        path: /etc/nginx/ssl/nginx.key
        state: present
      tags: nginx_config

    - name: Create Nginx's Self-Signed Certificate
      community.crypto.x509_certificate:
        path: /etc/nginx/ssl/nginx.crt
        privatekey_path: /etc/nginx/ssl/nginx.key
        state: present
        provider: selfsigned
      tags: nginx_config

    - name: Remove default configuration from Nginx
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      tags: nginx_config

    - name: Remove all port-80 listeners from Nginx
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        regexp: '^\s*listen\s+80;'
        state: absent
      with_fileglob:
        - "/etc/nginx/sites-enabled/*"
        - "/etc/nginx/conf.d/*"
        - "/etc/nginx/nginx.conf"
      tags: nginx_config

    - name: Add HTTPS/port-443 configuration to Nginx
      ansible.builtin.copy:
        dest: /etc/nginx/conf.d/https.conf
        owner: root
        group: root
        mode: "u=rw,g=rw,o=r"
        content: |
          server {
              listen 443 ssl;
              server_name _;

              ssl_certificate /etc/nginx/ssl/nginx.crt;
              ssl_certificate_key /etc/nginx/ssl/nginx.key;

              location / {
                root /var/www/html;
                index index.html index.htm;
              }
            }
      tags: nginx_config

    - name: Get location of postgresql.conf
      ansible.builtin.find:
        path: /etc
        patterns: 'postgresql.conf'
        file_type: file
        recurse: true
      register: postgresql_conf_loc
      tags: postgres_config

    - name: Get location of pg_hba.conf
      ansible.builtin.find:
        path: /etc
        patterns: 'pg_hba.conf'
        file_type: file
        recurse: true
      register: pg_hba_conf_loc
      tags: postgres_config

    - name: Force PSQL to listen externally
      ansible.builtin.lineinfile:
        line: "listen_addresses = '*'"
        path: "{{ item.path }}"
      loop: "{{ postgresql_conf_loc.files }}"
      tags: postgres_config

    - name: Force PSQL to accept all conns on 5432
      ansible.builtin.lineinfile:
        line: "host all all 0.0.0.0/0 md5"
        path: "{{ item.path }}"
      loop: "{{ pg_hba_conf_loc.files }}"
      tags: postgres_config

    - name: Bind MySQL on 0.0.0.0 (Debian)
      ansible.builtin.lineinfile:
        line: "bind-address=0.0.0.0"
        path: "{{ configuration_files.Debian.mysql }}"
        state: present
      when: ansible_os_family == "Debian"
      tags: mysql_config

    - name: Bind MySQL on 0.0.0.0 (RedHat)
      ansible.builtin.lineinfile:
        line: "bind-address=0.0.0.0"
        path: "{{ configuration_files.RedHat.mysql }}"
        state: present
      when: ansible_os_family == "RedHat"
      tags: mysql_config

    - name: On Rocky, initialize the DB
      ansible.builtin.command: /usr/bin/postgresql-setup --initdb
      changed_when: false
      when: ansible_distribution == "Rocky"
      tags: postgres_config

    - name: Enable and (re)start services (general)
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
        enabled: true
      loop: "{{ package_list.keys() }}"
      when: item not in service_list.keys()
      tags: services_online
      failed_when: false

    - name: Enable and start services (special cases)
      ansible.builtin.service:
        name: "{{ service_list[item] }}"
        state: restarted
        enabled: true
      loop: "{{ service_list.keys() }}"
      tags: services_online
